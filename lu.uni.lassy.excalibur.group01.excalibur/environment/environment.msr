/*
* @author Gaetan1991
* @date Wed Oct 11 14:39:06 CEST 2017
*/

package lu.uni.lassy.excalibur.group01.excalibur.environment {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.excalibur.group01.excalibur.concepts.primarytypes.datatypes


Environment Model {
			
actor actTechnician role rnactTechnician cardinality[0 .. *] {
			input interface inactTechnician {
			operation ieMessageWithTheRequestPulledToManager():ptBoolean
			operation ieSuccessfullyAddedTheSensorToTheSensorList():ptBoolean
			operation ieSuccessfullyDeletedTheRequestSensor():ptBoolean
			operation ieDisplaySensorByCategory():ptBoolean
			}
			output interface outactTechnician {
			operation sfRequestANewSensor(id:dtCropID,room:dtRoom,reason:dtString):ptBoolean
			operation sfAddANewSensor(id:dtIDSensor,location:dtLocation,type:etSensorType,update:etSensorUpdate):ptBoolean
			operation sfRemoveSensorFromSensorList(id:dtIDSensor):ptBoolean
			operation sfFilterBySensorName(type:etSensorType):ptBoolean
			operation oeLoadTaskTechnician():ptBoolean
			operation oeCreateSystemAndEnvironment():ptBoolean
			operation oeLogin():ptBoolean
			operation oeLogout():ptBoolean
			}
		}
	actor actGardener role rnactGardener cardinality[0 .. *] {
			input interface inactGardener {
			operation ieLoadedTask():ptBoolean
			operation ieRequestHasBeenSend():ptBoolean
			operation ieSuccessfullyRetrivedSeedsFromInventory():ptBoolean
			operation ieMessageSuggestion():ptBoolean
			}
			output interface outactGardener {
			operation oeLoadTaskGardener():ptBoolean
			operation sfAskForDiffrentSeed(AdtName:dtString,AdtAmount:dtInteger):ptBoolean
			operation sfModifyRetriveSeedAmount(AdtName:dtString,AdtAmount:dtInteger):ptBoolean
			operation sfAskForASuggestion():ptBoolean
			}
		}
	
	actor actManager role rnactManager cardinality[0 .. *] {
			input interface inactManager {
			operation ieRedirectManagerToHomeScreen():ptBoolean
			operation ieSuccessfullyRemovedItemSeeds():ptBoolean
			operation ieSuccessfullyAcceptedTheRequest():ptBoolean
			operation ieSortedListByAmount():ptBoolean
			operation ieSuccessfullyAddedTheSeed():ptBoolean
			}
			output interface outactManager {
				operation oeCreateSystemAndEnvironment():ptBoolean
				operation sfAddCrop():ptBoolean
				operation sfDelteCrop():ptBoolean
				operation sfAddTask():ptBoolean
				operation sfRemoveTask():ptBoolean
			operation sfAcceptADiffrentSeed(id:dtString):ptBoolean
			operation sfAddSeedToTheInventory(id:dtString,amount:dtInteger,phAmount:dtPhAmount,temperaturePref:dtInteger):ptBoolean
			operation sfSortRequestByAmount(id:dtIDSensor):ptBoolean
			operation sfSortByAmountRequest(id:dtIDSensor):ptBoolean
			operation sfAcceptRequestForNewSensor(id:dtIDSensor):ptBoolean
			}
		}
	actor actUser role rnactUser cardinality[0 .. *] {
			input interface inactUser {
			}
			output interface outactUser {
			}
		}
	actor actTemperatureSensor role rnactTemperatureSensor cardinality[0 .. *] {
			input interface inactTemperatureSensor {
			}
			output interface outactTemperatureSensor {
			operation sfTemperatureSensorPushValue():ptBoolean
			}
		}
	actor actHumiditySensor role rnactHumiditySensor cardinality[0 .. *] {
			input interface inactHumiditySensor {
			}
			output interface outactHumiditySensor {
			
			
			operation sfHumiditySensorPushValue():ptBoolean
			}
		}
	actor actLightSensor role rnactLightSensor cardinality[0 .. *] {
			input interface inactLightSensor {
			}
			output interface outactLightSensor {
			operation sfLightSensorPushValue():ptBoolean
			}
		}
	actor actPhMeter role rnactPhMeter cardinality[0 .. *] {
			input interface inactPhMeter {
			}
			output interface outactPhMeter {
			operation oeSendPhValueToTable():ptBoolean
			}
		}   
	actor actEcMeter role rnactEcMeter cardinality[0 .. *] {
			input interface inactEcMeter {
			}
			output interface outactEcMeter {
			}
		}
	actor actMotionSensor role rnactMotionSensor cardinality[0 .. *] {
			input interface inactMotionSensor {
			}
			output interface outactMotionSensor {
			}
		}
	
	}
}