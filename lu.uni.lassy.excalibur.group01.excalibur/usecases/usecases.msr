/*
* @author Gaetan1991
* @date Wed Oct 11 14:39:06 CEST 2017
*/

package lu.uni.lassy.excalibur.group01.excalibur.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

       
	Use Case Model {
		
	use case system subfunction sfcheckSensor() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
			 
		}
	use case system subfunction sfplating() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary, active]
		}
	use case system subfunction oeLogin() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actUser[primary, active]
			returned messages{
				ieMessage returned to lu.uni.lassy.excalibur.group01.excalibur.environment.actUser
			}
		}
		
	use case system subfunction oeLogout() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actUser[primary, active]
			returned messages{
				ieHLoggedOut returned to lu.uni.lassy.excalibur.group01.excalibur.environment.actUser
			}
		}   
			
	use case system subfunction oeEntersFields() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		
		}
	use case system subfunction sfSendsRequest() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actSystem[primary, active]
			returned messages{
				
			}
		}
	use case system subfunction sfChecksInputFields() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actSystem[primary, active]
		}
	use case system subfunction oeRequestPushedToTable() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actSystem[primary, active]
		}
	use case system summary suRequestItem() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary,active]
	}
	use case system usergoal ugSecurelyUseSystem() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actUser[primary,active]
		
		reuse oeLogin[1..1]
		reuse oeLogout[1..1]
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actUser
			executes oeLogin
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actUser
			executes oeLogout
			
		ordering constraint
		"step (a) must always precede step (b)."
		}
		
	use case system usergoal ugAskForSensor() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary,active]
		reuse oeEntersFields[1..1]
		reuse suRequestItem[1..1]
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes oeEntersFields
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes suRequestItem()
		}

		
		
	use case system usergoal ugAskForFruitOrVegtable() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary,active]
		
		
		}
	use case system usergoal ugAddANewSensorToTheRoom() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary,active]
		}
	use case system usergoal ugAddRoom() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		
		reuse sfEnterFields[0..*]
		reuse sfAddRoom[0..*]
		
		step a:lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfEnterFields()
		step b:lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddRoom()
		}
	use case system subfunction sfAddRoom() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfEnterFields() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system usergoal ugFillingGardnerSchedule() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary,active]
		
		reuse sfFillingTextFields[0..*]
		reuse sfChooseImportance[0..1]
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfFillingTextFields()
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfChooseImportance()
		
		}
	use case system subfunction sfFillingTextFields() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfChooseImportance() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfRequestANewSensor() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
	use case system subfunction sfAcceptRequestForNewSensor() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfAddANewSensor() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
	use case system subfunction sfReliveRequestSensor() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actSystem[primary, active]
		}
	use case system subfunction sfAskForANewCrop() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary, active]
		}
	use case system subfunction sfAcceptDiffrentCrop() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfAddCropToInventory() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfRemoveCropsFromInventory() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary, active]
		}
	use case system subfunction sfSortByAmountRequest() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfFilterBySensorName() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
	use case system subfunction sfRemoveSensorFromSensorList() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
		
		use case system subfunction oeCreateSystemAndEnvironment() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
		
		
	use case system usergoal ugAddANewSensor() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[secondary, active]
		
		reuse oeCreateSystemAndEnvironment[1..1]
		reuse sfRequestANewSensor[1..*]
		reuse sfAcceptRequestForNewSensor[1..*]
		reuse sfAddANewSensor[1..*]
		reuse sfRemoveSensorFromSensorList[1..*]
		
		step a:lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes oeCreateSystemAndEnvironment()
		step b:lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes sfRequestANewSensor()
		step c:lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAcceptRequestForNewSensor()
		step d:lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes sfAddANewSensor()
		step e: lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes sfRemoveSensorFromSensorList()
			
		
		ordering constraint
		"step a must always be the first step"
		ordering constraint
		"step b must come after a"
		ordering constraint
		"step c must come after b"
		ordering constraint
		"step d must come after c"
		ordering constraint
		"step e must come after d"
		
		
		}
	use case system usergoal ugAskForDiffrentCrop() {
		
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[secondary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[secondary,active]
		
		reuse oeCreateSystemAndEnvironment[1..1]
		reuse sfAskForANewCrop[0..*]
		reuse sfAcceptDiffrentCrop[0..*]
		reuse sfAddCropToInventory[0..*]
		
		step a:lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes oeCreateSystemAndEnvironment
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener
		executes sfAskForANewCrop()
		step c: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAcceptDiffrentCrop()
		step d: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddCropToInventory()
		
		
		
		ordering constraint
		"step a must always be the first step"
		ordering constraint
		"step b must come after a"
		ordering constraint
		"step c must come after b"
		ordering constraint
		"step d must come after c"
		
		}
	
	use case system summary sutest() {	
		}
	use case system subfunction sfTurnOnWatering() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actHumiditySensor[primary, active]
		}
	use case system subfunction sfOpenWindows() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTemperatureSensor[primary, active]
		}
	use case system subfunction sfTurnOnLED() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actLightSensor[primary, active]
		}
	use case system subfunction sfTurnOnHeater() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTemperatureSensor[primary, active]
		}
	use case system subfunction sfLightSensorPushValue() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actLightSensor[primary, active]
		}
	use case system subfunction sfTemperatureSensorPushValue() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTemperatureSensor[primary, active]
		}
	use case system subfunction sfHumiditySensorPushValue() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actHumiditySensor[primary, active]
		}
	use case system subfunction sfAddCrop() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfDeleteCrop() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfViewListOfCrops() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfLoadDataFromCrop() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system usergoal ugManageCrops() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
			
			reuse sfAddCrop[0..*]
			reuse sfDeleteCrop[0..*]
			
			step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes sfAddCrop()
			step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes sfDeleteCrop()
		}
	use case system usergoal ugViewCrops() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[secondary, active]
			
			reuse sfViewListOfCrops[1..1]
			reuse sfLoadDataFromCrop[0..*]
			
			step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes sfViewListOfCrops()
			step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes sfLoadDataFromCrop()
			
			ordering constraint
			"step a must always be the first step"
			ordering constraint
			"step b must come after a"
		}
	use case system summary suManageCropStatistics() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
			
			reuse ugManageCrops[0..*]
			reuse ugViewCrops[1..*]
			
			step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes ugViewCrops()
			step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
			executes ugManageCrops()
			
			ordering constraint
			"step (a) and (b) can be excuted multiple times."
			
		}
	use case system summary suManageSchedule() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[secondary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[secondary,active]	
		
		reuse ugManageGardenerSchedule[0..*]
		reuse ugManageTechnicianSchedule[0..*]
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddTask()
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfRemoveTask()
		step c: lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener
		executes sfLoadTaskGardener()
		step d: lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes sfLoadTaskTechnician()
		
		}
	use case system usergoal ugManageGardenerSchedule() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[secondary,active]
		
		reuse sfAddTask[1..1]
		reuse sfRemoveTask[1..1]
		reuse sfLoadTaskGardener[1..*]
		
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddTask()
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfRemoveTask()
		step c: lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener
		executes sfLoadTaskGardener()
		}
	use case system subfunction sfAddTask() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfRemoveTask() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system subfunction sfLoadTaskGardener() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actGardener[primary, active]
		}
	use case system usergoal ugManageTechnicianSchedule() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary,active]
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[secondary,active]
		
		reuse sfAddTask[1..1]
		reuse sfRemoveTask[1..1]
		reuse sfLoadTaskTechnician[1..*]
		
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddTask()
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfRemoveTask()
		step c: lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician
		executes sfLoadTaskTechnician()
		}
	use case system subfunction sfLoadTaskTechnician() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actTechnician[primary, active]
		}
	use case system subfunction sfDeleteRoom() {
			actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary, active]
		}
	use case system usergoal ugManageRooms() {
		actor lu.uni.lassy.excalibur.group01.excalibur.environment.actManager[primary,active]
		
		reuse sfAddRoom[0..*]
		reuse sfDeleteRoom[0..*]
		
		step a: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfAddRoom()
		step b: lu.uni.lassy.excalibur.group01.excalibur.environment.actManager
		executes sfDeleteRoom()
		
		}
	}

}